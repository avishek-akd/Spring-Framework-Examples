package com.avishek.spring;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.orm.hibernate4.HibernateTransactionManager;
import org.springframework.orm.hibernate4.HibernateTemplate;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.support.DefaultTransactionDefinition;


public class HibernateAccountDAO implements AccountDAO {

	@Autowired
	HibernateTemplate hTemp;
	
	
	@Autowired
	PlatformTransactionManager txManager;


	public double getBal(int accno) {
		Account acc = hTemp.load(Account.class, accno);
		double bal = acc.getBal();
	
		return bal;
	}

	public void deposit(int accno, double amt) {
		
		TransactionStatus ts= null;
		try {
			TransactionDefinition txDef = new DefaultTransactionDefinition(TransactionDefinition.PROPAGATION_REQUIRED);
			ts = txManager.getTransaction(txDef);
			
			
			double bal = getBal(accno);
			Account acc = new Account();
			acc.setBal(bal+amt);
			hTemp.update(acc);
			
			txManager.commit(ts);
		} catch (Exception e) {
				e.printStackTrace();	
				txManager.rollback(ts);
			}
		
		
		
	}

	public void withdraw(int accno, double amt) {
		
		TransactionStatus ts= null;
		try {
			TransactionDefinition txDef = new DefaultTransactionDefinition(TransactionDefinition.PROPAGATION_REQUIRED);
			ts = txManager.getTransaction(txDef);
		
		
		double bal = getBal(accno);
		if (bal>=amt+2000) {
			bal = bal-amt;
			String sql = "update account set bal=? where accno=?";
			jdbcTemp.update(sql,bal,accno);
		} else {
			throw new InsufficientFundException();
		}
		
		
		txManager.commit(ts);
		} catch (Exception e) {
				e.printStackTrace();	
				txManager.rollback(ts);
			}
		
	}

	public void fundTransfer(int saccno, int daccno, double amt) {
		
		TransactionStatus ts= null;
		try {
			TransactionDefinition txDef = new DefaultTransactionDefinition(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
			ts = txManager.getTransaction(txDef);
		
		
		System.out.println(getBal(102));
		deposit(daccno, amt);
		System.out.println(getBal(102));
		withdraw(saccno, amt);
		
		txManager.commit(ts);
		} catch (Exception e) {
				e.printStackTrace();	
				txManager.rollback(ts);
			}
	}
	
	



	
	
	


}
