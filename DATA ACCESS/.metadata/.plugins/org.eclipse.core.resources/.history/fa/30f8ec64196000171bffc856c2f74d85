package com.avishek.spring;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import  org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;

public class JdbcCustomerDAO implements CustomerDAO {

	@Autowired
	NamedParameterJdbcTemplate jdbcTemp;
	


	public CustomerTO getCustomerByCid(int cid) {
		String sql = "select * from customer where cid=?";
		//Object [] args = {cid};
		RowMapper rm = new CustomerRowMapper();
		CustomerTO cto = (CustomerTO )jdbcTemp.queryForObject(sql,rm,cid);
		
		return cto;
	}

	public CustomerTO getCustomerByEmail(String email) {
		String sql = "select * from customer where email=?";
		Object [] args = {email};
		CustomerTO cto = (CustomerTO )jdbcTemp.queryForObject(sql,args,new CustomerRowMapper());
		
		return cto;
	}

	public List<CustomerTO> getAllCustomers() {
		String sql = "select * from Customer";
		RowMapper rm = new CustomerRowMapper();
		List<CustomerTO> list = jdbcTemp.query(sql,rm);
		
		return list;
	}

	public List<CustomerTO> getCustomersByCity(String city) {
		String sql = "select * from Customer where city=?";
		Object [] args = {city};
		RowMapper rm = new CustomerRowMapper();
		List<CustomerTO> list = jdbcTemp.query(sql,args,rm);
		
		return list;
	}

	
	public int getCustomersCount() {
		String sql = "select count(*) from Customer";
		int count = jdbcTemp.queryForObject(sql, Integer.class);
		
		return count;
	}

	public String getCustomerCityByEmail(String email) {
		String sql = "select city from Customer where email=?";
		String city = jdbcTemp.queryForObject(sql, String.class,email);
		
		return city;
		
	}

	public long getCustomerPhoneByEmail(String email) {
		
		String sql = "select phone from Customer where email=?";
		long phone = jdbcTemp.queryForObject(sql, Long.class,email);
		
		return phone;
		
	}

	
	public void addCustomer(CustomerTO cto) {
		
		String sql = "insert into customer values(:CID,:CNAME,:EMAIL,:PHONE,:CITY)";
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("CID", cto.getCid());
		paramMap.put("CNAME", cto.getCname());
		paramMap.put("EMAIL", cto.getEmail());
		paramMap.put("PHONE", cto.getPhone());
		paramMap.put("CITY", cto.getCity());
		
		jdbcTemp.update(sql, paramMap);
	}

	public void updateCustomer(CustomerTO cto) {
		
		String sql = "update  customer set cname=:CNAME,email=:EMAIL,phone=:PHONE,city=:CITY where cid=:CID)";
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("CID", cto.getCid());
		paramMap.put("CNAME", cto.getCname());
		paramMap.put("EMAIL", cto.getEmail());
		paramMap.put("PHONE", cto.getPhone());
		paramMap.put("CITY", cto.getCity());
		
		jdbcTemp.update(sql, paramMap);
		
	}

	public void deleteCustomer(int cid) {
		
		String sql = "delete * from Customer where cid=:CID";
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("CID", cid);
		
		jdbcTemp.update(sql, paramMap);
	}

}
